import { Buffer } from 'buffer';
import { error } from '@sveltejs/kit';
import matter from 'gray-matter';
// Remove `PrerenderEntry` from this import
import type { PageLoad } from './$types';

if (typeof window !== 'undefined') {
  window.Buffer = Buffer;
}

/**
 * This function tells SvelteKit which pages to build for this static route.
 * We manually provide the return type because of a quirk in SvelteKit's
 * type generation for universal `+page.ts` files.
 */
export function entries(): Array<{ slug: string }> { // <-- THE FIX IS HERE
  const modules = import.meta.glob('/src/routes/blogs/posts/*.md', { 
    eager: true ,
    query: '?raw',
    import: 'default'
});

  return Object.keys(modules).map(path => {
    const slug = path.split('/').pop()?.replace('.md', '');
    // Ensure you return an object with the 'slug' key
    return { slug: slug || '' }; 
  }).filter(item => item.slug); // Filter out any empty slugs
}

// Enable prerendering for all pages generated by `entries`
export const prerender = true;

// Your universal load function
export const load: PageLoad = async ({ params }) => {
  const modules = import.meta.glob('/src/routes/blogs/posts/*.md', {
    eager: true,
    query: '?raw',
    import: 'default'
  });

  const postPath = `/src/routes/blogs/posts/${params.slug}.md`;

  if (!modules[postPath]) {
    throw error(404, `Post not found: ${params.slug}`);
  }

  const postContent = modules[postPath] as string;
  const { data: frontmatter, content } = matter(postContent);

  return {
    post: {
      ...frontmatter,
      content,
    },
  };
};